/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PredictionInterface extends ethers.utils.Interface {
  functions: {
    "addLeague((string,string))": FunctionFragment;
    "addLeagues(tuple[])": FunctionFragment;
    "addMatch((uint8,uint256))": FunctionFragment;
    "addMatches(tuple[])": FunctionFragment;
    "addPool((uint256[],uint16[],uint256,uint256,uint256,uint256))": FunctionFragment;
    "addPoolPrediction((uint256[],uint16[],uint8,address))": FunctionFragment;
    "bund()": FunctionFragment;
    "getChoicesOfPrediction(uint256)": FunctionFragment;
    "getMatchIdsOfPool(uint256)": FunctionFragment;
    "getResultsOfPool(uint256)": FunctionFragment;
    "gradePools(uint256,uint16[])": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isPredictedByPool(address,uint256)": FunctionFragment;
    "leagues(uint256)": FunctionFragment;
    "matchIndex(uint8,uint256)": FunctionFragment;
    "matches(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "predictions(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPools(uint256,address[],uint256[])": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryPercentage()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateLeague(uint8,(string,string))": FunctionFragment;
    "updateMatch(uint256,(uint8,uint256))": FunctionFragment;
    "updatePool(uint256,(uint256[],uint16[],uint256,uint256,uint256,uint256))": FunctionFragment;
    "updatePoolPrediction(uint256,(uint256[],uint16[],uint8,address))": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "updateTreasuryPercentage(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLeague",
    values: [{ name: string; sport: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "addLeagues",
    values: [{ name: string; sport: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addMatch",
    values: [{ leagueId: BigNumberish; espnMatchId: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "addMatches",
    values: [{ leagueId: BigNumberish; espnMatchId: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolPrediction",
    values: [
      {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "bund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChoicesOfPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchIdsOfPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResultsOfPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gradePools",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPredictedByPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leagues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPools",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLeague",
    values: [BigNumberish, { name: string; sport: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatch",
    values: [
      BigNumberish,
      { leagueId: BigNumberish; espnMatchId: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [
      BigNumberish,
      {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolPrediction",
    values: [
      BigNumberish,
      {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasuryPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addLeague", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addLeagues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMatches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPoolPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChoicesOfPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMatchIdsOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResultsOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gradePools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPredictedByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leagues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matchIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasuryPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;

  events: {
    "AdminAccessSet(address,bool)": EventFragment;
    "GradedPools(uint256,uint16[])": EventFragment;
    "LeagueAdded(uint8,string,string)": EventFragment;
    "LeagueUpdated(uint8,string,string)": EventFragment;
    "MatchAdded(uint8,uint256,uint256)": EventFragment;
    "MatchUpdated(uint8,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PoolAdded(uint256,uint256[],uint256,uint256,uint256)": EventFragment;
    "PoolPredicted(uint256,uint256[],uint16[],uint256,address)": EventFragment;
    "PoolUpdated(uint256,uint256[],uint256,uint256,uint256)": EventFragment;
    "PredictionUpdated(uint256,uint256[],uint16[],uint256,address)": EventFragment;
    "RewardedPools(uint256,address[],uint256[])": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAccessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GradedPools"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeagueAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeagueUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolPredicted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardedPools"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AdminAccessSetEvent = TypedEvent<
  [string, boolean] & { _admin: string; _enabled: boolean }
>;

export type GradedPoolsEvent = TypedEvent<
  [BigNumber, number[]] & { poolId: BigNumber; results: number[] }
>;

export type LeagueAddedEvent = TypedEvent<
  [number, string, string] & { leagueId: number; name: string; sport: string }
>;

export type LeagueUpdatedEvent = TypedEvent<
  [number, string, string] & { leagueId: number; name: string; sport: string }
>;

export type MatchAddedEvent = TypedEvent<
  [number, BigNumber, BigNumber] & {
    leagueId: number;
    espnMatchId: BigNumber;
    matchId: BigNumber;
  }
>;

export type MatchUpdatedEvent = TypedEvent<
  [number, BigNumber, BigNumber] & {
    leagueId: number;
    espnMatchId: BigNumber;
    matchId: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PoolAddedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber] & {
    poolId: BigNumber;
    matchIds: BigNumber[];
    startTime: BigNumber;
    endTime: BigNumber;
    fee: BigNumber;
  }
>;

export type PoolPredictedEvent = TypedEvent<
  [BigNumber, BigNumber[], number[], BigNumber, string] & {
    predictionId: BigNumber;
    matchIds: BigNumber[];
    choices: number[];
    poolId: BigNumber;
    predictor: string;
  }
>;

export type PoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber] & {
    poolId: BigNumber;
    matchIds: BigNumber[];
    startTime: BigNumber;
    endTime: BigNumber;
    fee: BigNumber;
  }
>;

export type PredictionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber[], number[], BigNumber, string] & {
    predictionId: BigNumber;
    matchIds: BigNumber[];
    choices: number[];
    poolId: BigNumber;
    predictor: string;
  }
>;

export type RewardedPoolsEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]] & {
    poolId: BigNumber;
    winners: string[];
    amount: BigNumber[];
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Prediction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PredictionInterface;

  functions: {
    addLeague(
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLeagues(
      _leagues: { name: string; sport: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMatch(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMatches(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoolPrediction(
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bund(overrides?: CallOverrides): Promise<[string]>;

    getChoicesOfPrediction(
      _predictionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getMatchIdsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getResultsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    gradePools(
      _poolId: BigNumberish,
      _results: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(admin: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPredictedByPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leagues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; sport: string }>;

    matchIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { leagueId: number; espnMatchId: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { poolId: number; predictor: string }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPools(
      _poolId: BigNumberish,
      _winners: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      admin: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLeague(
      _id: BigNumberish,
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMatch(
      matchId: BigNumberish,
      matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _poolId: BigNumberish,
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolPrediction(
      _predictionId: BigNumberish,
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTreasuryPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLeague(
    _league: { name: string; sport: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLeagues(
    _leagues: { name: string; sport: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMatch(
    _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMatches(
    _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    _pool: {
      matchIds: BigNumberish[];
      results: BigNumberish[];
      startTime: BigNumberish;
      endTime: BigNumberish;
      fee: BigNumberish;
      totalRewards: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoolPrediction(
    prediction: {
      matchIds: BigNumberish[];
      choices: BigNumberish[];
      poolId: BigNumberish;
      predictor: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bund(overrides?: CallOverrides): Promise<string>;

  getChoicesOfPrediction(
    _predictionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getMatchIdsOfPool(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getResultsOfPool(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  gradePools(
    _poolId: BigNumberish,
    _results: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

  isPredictedByPool(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leagues(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; sport: string }>;

  matchIndex(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { leagueId: number; espnMatchId: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      fee: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  predictions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { poolId: number; predictor: string }>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPools(
    _poolId: BigNumberish,
    _winners: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    admin: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLeague(
    _id: BigNumberish,
    _league: { name: string; sport: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMatch(
    matchId: BigNumberish,
    matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _poolId: BigNumberish,
    _pool: {
      matchIds: BigNumberish[];
      results: BigNumberish[];
      startTime: BigNumberish;
      endTime: BigNumberish;
      fee: BigNumberish;
      totalRewards: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolPrediction(
    _predictionId: BigNumberish,
    prediction: {
      matchIds: BigNumberish[];
      choices: BigNumberish[];
      poolId: BigNumberish;
      predictor: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTreasuryPercentage(
    _percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLeague(
      _league: { name: string; sport: string },
      overrides?: CallOverrides
    ): Promise<void>;

    addLeagues(
      _leagues: { name: string; sport: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMatch(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    addMatches(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolPrediction(
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    bund(overrides?: CallOverrides): Promise<string>;

    getChoicesOfPrediction(
      _predictionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getMatchIdsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getResultsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    gradePools(
      _poolId: BigNumberish,
      _results: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    isPredictedByPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leagues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; sport: string }>;

    matchIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { leagueId: number; espnMatchId: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { poolId: number; predictor: string }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPools(
      _poolId: BigNumberish,
      _winners: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      admin: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateLeague(
      _id: BigNumberish,
      _league: { name: string; sport: string },
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatch(
      matchId: BigNumberish,
      matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _poolId: BigNumberish,
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolPrediction(
      _predictionId: BigNumberish,
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    updateTreasuryPercentage(
      _percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawERC20(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminAccessSet(address,bool)"(
      _admin?: null,
      _enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { _admin: string; _enabled: boolean }
    >;

    AdminAccessSet(
      _admin?: null,
      _enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { _admin: string; _enabled: boolean }
    >;

    "GradedPools(uint256,uint16[])"(
      poolId?: null,
      results?: null
    ): TypedEventFilter<
      [BigNumber, number[]],
      { poolId: BigNumber; results: number[] }
    >;

    GradedPools(
      poolId?: null,
      results?: null
    ): TypedEventFilter<
      [BigNumber, number[]],
      { poolId: BigNumber; results: number[] }
    >;

    "LeagueAdded(uint8,string,string)"(
      leagueId?: BigNumberish | null,
      name?: null,
      sport?: null
    ): TypedEventFilter<
      [number, string, string],
      { leagueId: number; name: string; sport: string }
    >;

    LeagueAdded(
      leagueId?: BigNumberish | null,
      name?: null,
      sport?: null
    ): TypedEventFilter<
      [number, string, string],
      { leagueId: number; name: string; sport: string }
    >;

    "LeagueUpdated(uint8,string,string)"(
      leagueId?: BigNumberish | null,
      name?: null,
      sport?: null
    ): TypedEventFilter<
      [number, string, string],
      { leagueId: number; name: string; sport: string }
    >;

    LeagueUpdated(
      leagueId?: BigNumberish | null,
      name?: null,
      sport?: null
    ): TypedEventFilter<
      [number, string, string],
      { leagueId: number; name: string; sport: string }
    >;

    "MatchAdded(uint8,uint256,uint256)"(
      leagueId?: BigNumberish | null,
      espnMatchId?: null,
      matchId?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { leagueId: number; espnMatchId: BigNumber; matchId: BigNumber }
    >;

    MatchAdded(
      leagueId?: BigNumberish | null,
      espnMatchId?: null,
      matchId?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { leagueId: number; espnMatchId: BigNumber; matchId: BigNumber }
    >;

    "MatchUpdated(uint8,uint256,uint256)"(
      leagueId?: BigNumberish | null,
      espnMatchId?: null,
      matchId?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { leagueId: number; espnMatchId: BigNumber; matchId: BigNumber }
    >;

    MatchUpdated(
      leagueId?: BigNumberish | null,
      espnMatchId?: null,
      matchId?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { leagueId: number; espnMatchId: BigNumber; matchId: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PoolAdded(uint256,uint256[],uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      matchIds?: null,
      startTime?: null,
      endTime?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber],
      {
        poolId: BigNumber;
        matchIds: BigNumber[];
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
      }
    >;

    PoolAdded(
      poolId?: BigNumberish | null,
      matchIds?: null,
      startTime?: null,
      endTime?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber],
      {
        poolId: BigNumber;
        matchIds: BigNumber[];
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
      }
    >;

    "PoolPredicted(uint256,uint256[],uint16[],uint256,address)"(
      predictionId?: BigNumberish | null,
      matchIds?: null,
      choices?: null,
      poolId?: null,
      predictor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], number[], BigNumber, string],
      {
        predictionId: BigNumber;
        matchIds: BigNumber[];
        choices: number[];
        poolId: BigNumber;
        predictor: string;
      }
    >;

    PoolPredicted(
      predictionId?: BigNumberish | null,
      matchIds?: null,
      choices?: null,
      poolId?: null,
      predictor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], number[], BigNumber, string],
      {
        predictionId: BigNumber;
        matchIds: BigNumber[];
        choices: number[];
        poolId: BigNumber;
        predictor: string;
      }
    >;

    "PoolUpdated(uint256,uint256[],uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      matchIds?: null,
      startTime?: null,
      endTime?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber],
      {
        poolId: BigNumber;
        matchIds: BigNumber[];
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
      }
    >;

    PoolUpdated(
      poolId?: BigNumberish | null,
      matchIds?: null,
      startTime?: null,
      endTime?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber],
      {
        poolId: BigNumber;
        matchIds: BigNumber[];
        startTime: BigNumber;
        endTime: BigNumber;
        fee: BigNumber;
      }
    >;

    "PredictionUpdated(uint256,uint256[],uint16[],uint256,address)"(
      predictionId?: BigNumberish | null,
      matchIds?: null,
      choices?: null,
      poolId?: null,
      predictor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], number[], BigNumber, string],
      {
        predictionId: BigNumber;
        matchIds: BigNumber[];
        choices: number[];
        poolId: BigNumber;
        predictor: string;
      }
    >;

    PredictionUpdated(
      predictionId?: BigNumberish | null,
      matchIds?: null,
      choices?: null,
      poolId?: null,
      predictor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], number[], BigNumber, string],
      {
        predictionId: BigNumber;
        matchIds: BigNumber[];
        choices: number[];
        poolId: BigNumber;
        predictor: string;
      }
    >;

    "RewardedPools(uint256,address[],uint256[])"(
      poolId?: null,
      winners?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string[], BigNumber[]],
      { poolId: BigNumber; winners: string[]; amount: BigNumber[] }
    >;

    RewardedPools(
      poolId?: null,
      winners?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string[], BigNumber[]],
      { poolId: BigNumber; winners: string[]; amount: BigNumber[] }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addLeague(
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLeagues(
      _leagues: { name: string; sport: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMatch(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMatches(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoolPrediction(
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bund(overrides?: CallOverrides): Promise<BigNumber>;

    getChoicesOfPrediction(
      _predictionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchIdsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResultsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gradePools(
      _poolId: BigNumberish,
      _results: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(admin: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPredictedByPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leagues(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    matchIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPools(
      _poolId: BigNumberish,
      _winners: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLeague(
      _id: BigNumberish,
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMatch(
      matchId: BigNumberish,
      matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _poolId: BigNumberish,
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolPrediction(
      _predictionId: BigNumberish,
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTreasuryPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLeague(
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLeagues(
      _leagues: { name: string; sport: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMatch(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMatches(
      _matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoolPrediction(
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChoicesOfPrediction(
      _predictionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchIdsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResultsOfPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gradePools(
      _poolId: BigNumberish,
      _results: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPredictedByPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leagues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPools(
      _poolId: BigNumberish,
      _winners: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLeague(
      _id: BigNumberish,
      _league: { name: string; sport: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMatch(
      matchId: BigNumberish,
      matchData: { leagueId: BigNumberish; espnMatchId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _poolId: BigNumberish,
      _pool: {
        matchIds: BigNumberish[];
        results: BigNumberish[];
        startTime: BigNumberish;
        endTime: BigNumberish;
        fee: BigNumberish;
        totalRewards: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolPrediction(
      _predictionId: BigNumberish,
      prediction: {
        matchIds: BigNumberish[];
        choices: BigNumberish[];
        poolId: BigNumberish;
        predictor: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasuryPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
