{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    const equivalent = this.chainId === other.chainId && this.address === other.address\n    if (equivalent) {\n      // reference the same token, must have the same decimals/symbol/name\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equivalent\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n// returns the percent difference between the mid price and the execution price\n// we call this price impact in the UI\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: CurrencyAmount\n  public readonly outputAmount: CurrencyAmount\n  // the price expressed in terms of output/input\n  public readonly executionPrice: Price\n  // the mid price after the trade executes assuming zero slippage\n  public readonly nextMidPrice: Price\n  // the percent difference between the mid price before the trade and the price after the trade\n  public readonly priceImpact: Percent\n\n  // this is a misnomer for price impact, but kept for compatibility\n  public get slippage(): Percent {\n    return this.priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\nexport interface TradeOptions {\n  // how much the execution price is allowed to move unfavorably from the trade execution price\n  allowedSlippage: Percent\n  // how long the swap is valid until it expires, in seconds\n  // this will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n  // are generated.\n  ttl: number\n  // the account that should receive the output of the swap\n  recipient: string\n\n  // whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n  feeOnTransfer?: boolean\n}\n\nexport interface SwapParameters {\n  // the method to call on the Uniswap V2 Router\n  methodName: string\n  // the arguments to pass to the method, all hex encoded\n  args: (string | string[])[]\n  // the amount of wei to send in hex\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","CACHE","MAINNET","Token","chainId","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","_CACHE2","_CACHE2$chainId","Contract","ERC20","then","_CACHE3","equals","other","this","equivalent","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","involvesToken","token0","token1","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}