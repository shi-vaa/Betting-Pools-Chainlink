{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    const equivalent = this.chainId === other.chainId && this.address === other.address\n    if (equivalent) {\n      // reference the same token, must have the same decimals/symbol/name\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equivalent\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n// returns the percent difference between the mid price and the execution price\n// we call this price impact in the UI\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: CurrencyAmount\n  public readonly outputAmount: CurrencyAmount\n  // the price expressed in terms of output/input\n  public readonly executionPrice: Price\n  // the mid price after the trade executes assuming zero slippage\n  public readonly nextMidPrice: Price\n  // the percent difference between the mid price before the trade and the price after the trade\n  public readonly priceImpact: Percent\n\n  // this is a misnomer for price impact, but kept for compatibility\n  public get slippage(): Percent {\n    return this.priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\nexport interface TradeOptions {\n  // how much the execution price is allowed to move unfavorably from the trade execution price\n  allowedSlippage: Percent\n  // how long the swap is valid until it expires, in seconds\n  // this will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n  // are generated.\n  ttl: number\n  // the account that should receive the output of the swap\n  recipient: string\n\n  // whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n  feeOnTransfer?: boolean\n}\n\nexport interface SwapParameters {\n  // the method to call on the Uniswap V2 Router\n  methodName: string\n  // the arguments to pass to the method, all hex encoded\n  args: (string | string[])[]\n  // the amount of wei to send in hex\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","CACHE","MAINNET","Token","chainId","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equivalent","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","involvesToken","token0","token1","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}